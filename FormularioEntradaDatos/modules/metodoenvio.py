# modules/metodoenvio.py
import streamlit as st
import pandas as pd
from .ui import render_header, can_edit

TABLE = "metodoenvio"
FIELDS_LIST = ["metodoenvioid", "nombre", "descripcion"]

METODOS_PREDEFINIDOS = [
    "Urgente (24h)", "Est√°ndar (3-5 d√≠as)", "Econ√≥mico",
    "Recogida en tienda", "Internacional"
]

EDIT_KEY = "editing_metodo"
DEL_KEY  = "pending_delete_metodo"

def render_metodo_envio(supabase):
    # ‚úÖ Cabecera unificada
    render_header(
        "üì¶ Cat√°logo: M√©todos de Env√≠o",
        "Define los m√©todos de env√≠o disponibles (urgente, est√°ndar, etc.)."
    )

    tab1, tab2, tab3 = st.tabs(["üìù Formulario + Tabla", "üìÇ CSV", "üìñ Instrucciones"])

    # ---------------------------
    # TAB 1: Formulario + Tabla
    # ---------------------------
    with tab1:
        st.subheader("A√±adir M√©todo de Env√≠o")

        with st.form("form_metodo"):
            nombre = st.selectbox("Nombre *", ["‚Äî Introducir manualmente ‚Äî"] + METODOS_PREDEFINIDOS)
            if nombre == "‚Äî Introducir manualmente ‚Äî":
                nombre = st.text_input("Otro m√©todo *", max_chars=150)
            descripcion = st.text_area("Descripci√≥n", max_chars=300)

            if st.form_submit_button("‚ûï Insertar"):
                if not nombre:
                    st.error("‚ùå El nombre es obligatorio")
                else:
                    supabase.table(TABLE).insert({
                        "nombre": nombre,
                        "descripcion": descripcion
                    }).execute()
                    st.success("‚úÖ M√©todo insertado")
                    st.rerun()

        # ---------------------------
        # üîé B√∫squeda y filtros
        # ---------------------------
        st.markdown("### üîé Buscar / Filtrar m√©todos")
        df = pd.DataFrame(supabase.table(TABLE).select("*").execute().data)

        if not df.empty:
            with st.expander("üîé Filtros"):
                campo = st.selectbox("Selecciona un campo", df.columns, key="metodo_campo")
                valor = st.text_input("Valor a buscar", key="metodo_valor")
                orden = st.radio("Ordenar por", ["Ascendente", "Descendente"],
                                 horizontal=True, key="metodo_orden")

                if valor:
                    df = df[df[campo].astype(str).str.contains(valor, case=False, na=False)]
                df = df.sort_values(by=campo, ascending=(orden=="Ascendente"))

        # ---------------------------
        # üìë Tabla en vivo
        # ---------------------------
        st.markdown("### üìë M√©todos registrados")
        st.dataframe(df, use_container_width=True)

        # ---------------------------
        # ‚öôÔ∏è Acciones avanzadas
        # ---------------------------
        st.markdown("### ‚öôÔ∏è Acciones avanzadas")
        with st.expander("‚öôÔ∏è Editar / Borrar m√©todos (requiere login)"):
            if can_edit() and not df.empty:
                for _, row in df.iterrows():
                    mid = int(row["metodoenvioid"])
                    st.markdown(f"**{row.get('nombre','')} ‚Üí {row.get('descripcion','')}**")
                    c1, c2 = st.columns(2)
                    with c1:
                        if st.button("‚úèÔ∏è Editar", key=f"metodo_edit_{mid}"):
                            st.session_state[EDIT_KEY] = mid
                            st.rerun()
                    with c2:
                        if st.button("üóëÔ∏è Borrar", key=f"metodo_del_{mid}"):
                            st.session_state[DEL_KEY] = mid
                            st.rerun()
                    st.markdown("---")

                # Confirmar borrado
                if st.session_state.get(DEL_KEY):
                    did = st.session_state[DEL_KEY]
                    st.error(f"‚ö†Ô∏è ¬øEliminar m√©todo #{did}?")
                    c1, c2 = st.columns(2)
                    with c1:
                        if st.button("‚úÖ Confirmar", key="metodo_confirm_del"):
                            supabase.table(TABLE).delete().eq("metodoenvioid", did).execute()
                            st.success("‚úÖ M√©todo eliminado")
                            st.session_state[DEL_KEY] = None
                            st.rerun()
                    with c2:
                        if st.button("‚ùå Cancelar", key="metodo_cancel_del"):
                            st.session_state[DEL_KEY] = None
                            st.rerun()

                # Edici√≥n inline
                if st.session_state.get(EDIT_KEY):
                    eid = st.session_state[EDIT_KEY]
                    cur = df[df["metodoenvioid"]==eid].iloc[0].to_dict()
                    st.subheader(f"Editar M√©todo #{eid}")
                    with st.form(f"edit_metodo_{eid}"):
                        nombre = st.text_input("Nombre", cur.get("nombre",""))
                        descripcion = st.text_area("Descripci√≥n", cur.get("descripcion",""))
                        if st.form_submit_button("üíæ Guardar"):
                            supabase.table(TABLE).update({
                                "nombre": nombre,
                                "descripcion": descripcion
                            }).eq("metodoenvioid", eid).execute()
                            st.success("‚úÖ M√©todo actualizado")
                            st.session_state[EDIT_KEY] = None
                            st.rerun()
            else:
                st.warning("‚ö†Ô∏è Debes iniciar sesi√≥n para editar o borrar m√©todos.")

    # ---------------------------
    # TAB 2: CSV
    # ---------------------------
    with tab2:
        st.subheader("Importar desde CSV")
        st.caption("Columnas: nombre,descripcion")
        up = st.file_uploader("Selecciona CSV", type=["csv"], key="csv_metodoenvio")
        if up:
            df_csv = pd.read_csv(up)
            st.dataframe(df_csv, use_container_width=True)
            if st.button("‚ûï Insertar todos", key="btn_csv_metodoenvio"):
                supabase.table(TABLE).insert(df_csv.to_dict(orient="records")).execute()
                st.success(f"‚úÖ Insertados {len(df_csv)}")
                st.rerun()

    # ---------------------------
    # TAB 3: Instrucciones
    # ---------------------------
    with tab3:
        st.subheader("üìë Campos de M√©todos de Env√≠o")
        st.markdown("""
        - **metodoenvioid** ‚Üí Identificador √∫nico del m√©todo.  
        - **nombre** ‚Üí Nombre del m√©todo de env√≠o (ej: Urgente, Est√°ndar, Econ√≥mico).  
        - **descripcion** ‚Üí Detalle adicional sobre el m√©todo.  
        """)
        st.subheader("üìñ Ejemplo CSV")
        st.code(
            "nombre,descripcion\n"
            "Urgente (24h),Entrega en 24h\n"
            "Est√°ndar (3-5 d√≠as),Entrega en 3-5 d√≠as",
            language="csv"
        )
